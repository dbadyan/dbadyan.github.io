{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/immer/dist/immer.module.js","webpack:///./node_modules/process/browser.js","webpack:///./src/actions.js","webpack:///./src/index.js","webpack:///./src/initialState.js","webpack:///./src/quests.js","webpack:///./src/reducers.js","webpack:///./src/store.js","webpack:///./src/ui.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA,eAAe,wBAAwB,EAAE;;AAEzC;AACA,GAAG;AACH;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;;AAEA;AACA,4DAA4D;AAC5D;AACA,KAAK,EAAE;AACP,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA,4BAA4B,qBAAqB;AACjD,oBAAoB,sBAAsB;AAC1C,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,YAAY;AACtC,2BAA2B,uBAAuB;AAClD,mBAAmB,qBAAqB;AACxC,mBAAmB,qBAAqB;AACxC;;AAEA,wBAAwB,+BAA+B;;AAEvD;AACA;AACA;AACA;AACA;AACA;;AAEA,kEAAkE,QAAQ;;AAE1E;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,aAAa;AACb;AACA,GAAG,EAAE;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA,8BAA8B;;AAE9B,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;;AAEhC,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;;;AAGL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,cAAc,EAAE;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;;AAEA;AACA,oBAAoB,8CAA8C;AAClE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mDAAmD,gBAAgB;AACnE;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,2KAA2K;AAC1M,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;;AAEA;AACA;AACA,qCAAqC,oBAAoB;AACzD,OAAO;AACP,mCAAmC,oBAAoB;AACvD,OAAO;AACP,mCAAmC,oBAAoB;AACvD,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,QAAQ;AACtD;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK,EAAE;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA,gCAAgC,iBAAiB,OAAO,qBAAqB;AAC7E,KAAK;AACL,+BAA+B,kBAAkB,OAAO,oBAAoB;AAC5E;;AAEA,mBAAmB,kBAAkB;AACrC;AACA,sCAAsC,kCAAkC;AACxE;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;;AAEA,+BAA+B,QAAQ;AACvC;AACA,8BAA8B;;AAE9B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;;AAEA;AACA;AACA,2CAA2C,aAAa,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA,4EAA4E;;AAE5E,sCAAsC,aAAa,EAAE;;AAErD;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,aAAa,EAAE;;AAEhD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,aAAa,EAAE;;AAEhD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,cAAc;AAC7C,8BAA8B;;AAE9B;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA,+CAA+C,cAAc,EAAE;;AAE/D;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,+CAA+C;AAC/C;AACA;;AAEA;AACA,wBAAwB,aAAa;AACrC;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,qBAAqB,yBAAyB;AAC9C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA,gFAAgF;AAChF,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,kEAAkE;AAClE;;AAEA;AACA;;AAEA;AACA;AACA,2FAA2F;AAC3F;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA,sDAAsD,gBAAgB;AACtE,kDAAkD;;AAElD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,4CAA4C;;AAE5C;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,2BAA2B;;AAE3B;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA,yBAAyB;;AAEzB;AACA;AACA,CAAC;AACD;AACA,yBAAyB;;AAEzB;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,yBAAyB,EAAE,MAAM,sBAAsB;AAC/E;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,uBAAuB;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA,GAAG,IAAI;AACP;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA,KAAK;AACL;AACA,kFAAkF;AAClF;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA;;AAEA,wCAAwC;;AAExC;;AAEA;AACA;AACA,GAAG;;;AAGH;;AAEA;AACA;AACA,GAAG;;;AAGH,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,oCAAoC;;AAEpC,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;;AAEA,mBAAmB,qBAAqB;AACxC;AACA,8CAA8C,gFAAgF,EAAE;AAChI;;AAEA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,+CAA+C,aAAoB;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,eAAe,IAAI;AACnB;;;AAGA;AACA,qBAAqB;;;AAGrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;;AAEA;AACA;AACA,SAAS,EAAE;AACX;AACA,KAAK;;;AAGL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,uBAAuB,kBAAkB,EAAE,MAAM,iBAAiB;AAClE;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,KAAK;AACL;AACA,+BAA+B,kBAAkB;AACjD,iCAAiC,eAAe;AAChD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB,uBAAuB;AAC/C;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,KAAK;;;AAGL,eAAe,4EAA4E;AAC3F;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,kHAAkH;AAClH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mGAAmG;AACnG;;AAEA;AACA,8DAA8D;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,QAAQ;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6IAA6I;AAC7I;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA,mCAAmC,cAAc;AACjD;AACA,KAAK;;;AAGL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kDAAkD;;AAElD;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,4FAA4F;AACtH,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,4FAA4F;AACjI,WAAW;AACX;AACA;;AAEA;AACA;AACA,OAAO;AACP;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;;AAGP;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA,qCAAqC;;AAErC;AACA;AACA,SAAS;;;AAGT,6DAA6D,QAAQ;AACrE,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,IAAI;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,sEAAO,EAAC;AAC2L;AAClN;;;;;;;;;;;;;AC14DA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;;ACvLtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACO;;AAEtC;AACP,WAAW,qDAAO;AAClB;AACA;AACA,KAAK;AACL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA,KAAK;AACL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA;AACA,KAAK;AACL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA,yBAAyB,yDAAW,CAAC,0DAAQ;AAC7C;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA,KAAK;;AAEL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA,KAAK;AACL;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA,KAAK;AACL;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,WAAW,qDAAO;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACO;AACP,WAAW,qDAAO;AAClB;AACA,KAAK;AACL,C;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACR;AACN;AACC;;AAEjC;AACA,IAAI,0DAAQ,sBAAsB,UAAU,+CAAc,kCAAkC;AAC5F;;AAEA;AACA;AACA,IAAI,0DAAQ,gBAAgB,yDAAyD;AACrF,sCAAsC,+CAAc;AACpD;AACA;AACA,YAAY,qDAAK,CAAC,mCAAK;AACvB;AACA,KAAK;AACL;AACA;AACA,IAAI,0DAAQ,gBAAgB,eAAe,0DAAY,EAAE;AACzD;;;;;;;;;;;;;ACrBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAsC;;AAE/B;;AAEP;AACA,QAAQ,0DAAQ,qCAAqC,qFAAqF;AAC1I;;AAEA;AACA,QAAQ,0DAAQ,kCAAkC,iEAAiE;AACnH,KAAK;;AAEL;AACA;;AAEO;AACP;AACA,IAAI,0DAAQ,qBAAqB,wDAAwD;;AAEzF;AACA,QAAQ,0DAAQ,4BAA4B,iEAAiE;AAC7G,QAAQ,0DAAQ,gBAAgB,+DAA+D;AAC/F;AACA;AACA,YAAY,0DAAQ,sCAAsC,iCAAiC;AAC3F,SAAS;AACT,QAAQ,0DAAQ,qBAAqB,iCAAiC;AACtE;AACA;;AAEA,IAAI,0DAAQ,sBAAsB,qEAAqE;AACvG;AACA;AACA;AACA,YAAY,0DAAQ,sCAAsC,iCAAiC;AAC3F,SAAS;AACT,QAAQ,0DAAQ,qBAAqB,iCAAiC;AACtE;AACA;;AAEA,IAAI,0DAAQ,4BAA4B,iCAAiC;AACzE;AACA,QAAQ,0DAAQ,4BAA4B,iEAAiE;AAC7G,QAAQ,0DAAQ,gBAAgB,+DAA+D;AAC/F;AACA;AACA,YAAY,0DAAQ,sCAAsC,iCAAiC;AAC3F,SAAS;AACT,QAAQ,0DAAQ,qBAAqB,iCAAiC;AACtE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACU;AACJ;;AAE1B;AACP,gBAAgB,+CAAc;;AAE9B;AACA;AACA,gBAAgB,mDAAkB;AAClC;AACA;AACA;AACA,oBAAoB,kDAAiB;AACrC;AACA;AACA,oBAAoB,sDAAqB;AACzC;AACA;AACA,oBAAoB,uDAAsB;AAC1C;AACA;AACA,oBAAoB,2DAA0B;AAC9C;AACA;AACA,oBAAoB,6DAA4B;AAChD;AACA;AACA,oBAAoB,uDAAsB;AAC1C;AACA;AACA,oBAAoB,kDAAiB;AACrC;AACA;AACA,oBAAoB,gDAAe;AACnC;AACA;AACA,oBAAoB,kEAAiC;AACrD;AACA;AACA,oBAAoB,sEAAqC;AACzD;AACA;AACA,oBAAoB,qEAAoC;AACxD;AACA;AACA;AACA;AACA,IAAI,+CAAc;;AAElB;;AAEA,IAAI,8CAAa,CAAC,mCAAK;;AAEvB;AACA,C;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;;AAEO;AACP;AACA;;AAEO;AACP;AACA,C;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAsC;AACA;;AAE/B;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA,oCAAoC,WAAW,GAAG,sBAAsB;AACxE;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB,IAAI,mBAAmB;AAC/D,kBAAkB,uBAAuB,UAAU,sBAAsB;AACzE;AACA;AACA;AACA,QAAQ,0DAAQ,qCAAqC,oDAAoD;AACzG,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gEAAgE,0DAAU;AAC1E,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf,MAAM;AACN;AACA;;AAEA;AACA;AACA,C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\nvar _a;\n/**\r\n * The sentinel value returned by producers to replace the draft with undefined.\r\n */\n\nvar NOTHING = typeof Symbol !== \"undefined\" ? Symbol(\"immer-nothing\") : (_a = {}, _a[\"immer-nothing\"] = true, _a);\n/**\r\n * To let Immer treat your class instances as plain immutable objects\r\n * (albeit with a custom prototype), you must define either an instance property\r\n * or a static property on each of your custom classes.\r\n *\r\n * Otherwise, your class instance will never be drafted, which means it won't be\r\n * safe to mutate in a produce callback.\r\n */\n\nvar DRAFTABLE = typeof Symbol !== \"undefined\" && Symbol[\"for\"] ? Symbol[\"for\"](\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = typeof Symbol !== \"undefined\" && Symbol[\"for\"] ? Symbol[\"for\"](\"immer-state\") : \"__$immer_state\";\n/** Returns true if the given value is an Immer draft */\n\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\n/** Returns true if the given value can be drafted by Immer */\n\nfunction isDraftable(value) {\n  if (!value) { return false; }\n  return isPlainObject(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);\n}\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\") { return false; }\n  if (Array.isArray(value)) { return true; }\n  var proto = Object.getPrototypeOf(value);\n  return !proto || proto === Object.prototype;\n}\n/** Get the underlying object that is represented by the given draft */\n\nfunction original(value) {\n  if (value && value[DRAFT_STATE]) {\n    return value[DRAFT_STATE].base;\n  } // otherwise return undefined\n\n} // We use Maps as `drafts` for Sets, not Objects\n// See proxy.js\n\nfunction assignSet(target, override) {\n  override.forEach(function (value) {\n    // When we add new drafts we have to remove their originals if present\n    var prev = original(value);\n    if (prev) { target[\"delete\"](prev); } // @ts-ignore TODO investigate\n\n    target.add(value);\n  });\n  return target;\n} // We use Maps as `drafts` for Maps, not Objects\n// See proxy.js\n\nfunction assignMap(target, override) {\n  override.forEach(function (value, key) {\n    return target.set(key, value);\n  });\n  return target;\n}\nvar assign = Object.assign || function (target) {\n  var arguments$1 = arguments;\n\n  var overrides = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    overrides[_i - 1] = arguments$1[_i];\n  }\n\n  overrides.forEach(function (override) {\n    if (typeof override === \"object\" && override !== null) { Object.keys(override).forEach(function (key) {\n      return target[key] = override[key];\n    }); }\n  });\n  return target;\n};\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : Object.getOwnPropertyNames;\nfunction shallowCopy(base, invokeGetters) {\n  if (invokeGetters === void 0) {\n    invokeGetters = false;\n  }\n\n  if (Array.isArray(base)) { return base.slice(); }\n  if (isMap(base)) { return new Map(base); }\n  if (isSet(base)) { return new Set(base); }\n  var clone = Object.create(Object.getPrototypeOf(base));\n  ownKeys(base).forEach(function (key) {\n    if (key === DRAFT_STATE) {\n      return; // Never copy over draft state.\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(base, key);\n    var value = desc.value;\n\n    if (desc.get) {\n      if (!invokeGetters) {\n        throw new Error(\"Immer drafts cannot have computed properties\");\n      }\n\n      value = desc.get.call(base);\n    }\n\n    if (desc.enumerable) {\n      clone[key] = value;\n    } else {\n      Object.defineProperty(clone, key, {\n        value: value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n  return clone;\n}\nfunction each(obj, iter) {\n  if (Array.isArray(obj) || isMap(obj) || isSet(obj)) {\n    obj.forEach(function (entry, index) {\n      return iter(index, entry, obj);\n    });\n  } else {\n    ownKeys(obj).forEach(function (key) {\n      return iter(key, obj[key], obj);\n    });\n  }\n}\nfunction isEnumerable(base, prop) {\n  var desc = Object.getOwnPropertyDescriptor(base, prop);\n  return desc && desc.enumerable ? true : false;\n}\nfunction has(thing, prop) {\n  return isMap(thing) ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\nfunction get(thing, prop) {\n  return isMap(thing) ? thing.get(prop) : thing[prop];\n}\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\nvar hasSymbol = typeof Symbol !== \"undefined\";\nvar hasMap = typeof Map !== \"undefined\";\nfunction isMap(target) {\n  return hasMap && target instanceof Map;\n}\nvar hasSet = typeof Set !== \"undefined\";\nfunction isSet(target) {\n  return hasSet && target instanceof Set;\n}\nfunction makeIterable(next) {\n  var _a;\n\n  var self;\n  return self = (_a = {}, _a[Symbol.iterator] = function () {\n    return self;\n  }, _a.next = next, _a);\n}\n/** Map.prototype.values _-or-_ Map.prototype.entries */\n\nfunction iterateMapValues(state, prop, receiver) {\n  var isEntries = prop !== \"values\";\n  return function () {\n    var iterator = latest(state)[Symbol.iterator]();\n    return makeIterable(function () {\n      var result = iterator.next();\n\n      if (!result.done) {\n        var key = result.value[0];\n        var value = receiver.get(key);\n        result.value = isEntries ? [key, value] : value;\n      }\n\n      return result;\n    });\n  };\n}\nfunction makeIterateSetValues(createProxy) {\n  function iterateSetValues(state, prop) {\n    var isEntries = prop === \"entries\";\n    return function () {\n      var iterator = latest(state)[Symbol.iterator]();\n      return makeIterable(function () {\n        var result = iterator.next();\n\n        if (!result.done) {\n          var value = wrapSetValue(state, result.value);\n          result.value = isEntries ? [value, value] : value;\n        }\n\n        return result;\n      });\n    };\n  }\n\n  function wrapSetValue(state, value) {\n    var key = original(value) || value;\n    var draft = state.drafts.get(key);\n\n    if (!draft) {\n      if (state.finalized || !isDraftable(value) || state.finalizing) {\n        return value;\n      }\n\n      draft = createProxy(value, state);\n      state.drafts.set(key, draft);\n\n      if (state.modified) {\n        state.copy.add(draft);\n      }\n    }\n\n    return draft;\n  }\n\n  return iterateSetValues;\n}\n\nfunction latest(state) {\n  return state.copy || state.base;\n}\n\nfunction clone(obj) {\n  if (!isDraftable(obj)) { return obj; }\n  if (Array.isArray(obj)) { return obj.map(clone); }\n  if (isMap(obj)) { return new Map(obj); }\n  if (isSet(obj)) { return new Set(obj); }\n  var cloned = Object.create(Object.getPrototypeOf(obj));\n\n  for (var key in obj) { cloned[key] = clone(obj[key]); }\n\n  return cloned;\n}\nfunction freeze(obj, deep) {\n  if (deep === void 0) {\n    deep = false;\n  }\n\n  if (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) { return; }\n\n  if (isSet(obj)) {\n    obj.add = obj.clear = obj[\"delete\"] = dontMutateFrozenCollections;\n  } else if (isMap(obj)) {\n    obj.set = obj.clear = obj[\"delete\"] = dontMutateFrozenCollections;\n  }\n\n  Object.freeze(obj);\n  if (deep) { each(obj, function (_, value) {\n    return freeze(value, true);\n  }); }\n}\n\nfunction dontMutateFrozenCollections() {\n  throw new Error(\"This object has been frozen and should not be mutated\");\n}\n\n/** Each scope represents a `produce` call. */\n\nvar ImmerScope =\n/** @class */\nfunction () {\n  function ImmerScope(parent) {\n    this.drafts = [];\n    this.parent = parent; // Whenever the modified draft contains a draft from another scope, we\n    // need to prevent auto-freezing so the unowned draft can be finalized.\n\n    this.canAutoFreeze = true; // To avoid prototype lookups:\n\n    this.patches = null; // TODO:\n  }\n\n  ImmerScope.prototype.usePatches = function (patchListener) {\n    if (patchListener) {\n      this.patches = [];\n      this.inversePatches = [];\n      this.patchListener = patchListener;\n    }\n  };\n\n  ImmerScope.prototype.revoke = function () {\n    this.leave();\n    this.drafts.forEach(revoke); // @ts-ignore\n\n    this.drafts = null; // TODO: // Make draft-related methods throw.\n  };\n\n  ImmerScope.prototype.leave = function () {\n    if (this === ImmerScope.current) {\n      ImmerScope.current = this.parent;\n    }\n  };\n\n  ImmerScope.enter = function () {\n    var scope = new ImmerScope(ImmerScope.current);\n    ImmerScope.current = scope;\n    return scope;\n  };\n\n  return ImmerScope;\n}();\n\nfunction revoke(draft) {\n  draft[DRAFT_STATE].revoke();\n}\n\nfunction willFinalize(scope, result, isReplaced) {\n  scope.drafts.forEach(function (draft) {\n    draft[DRAFT_STATE].finalizing = true;\n  });\n\n  if (!isReplaced) {\n    if (scope.patches) {\n      markChangesRecursively(scope.drafts[0]);\n    } // This is faster when we don't care about which attributes changed.\n\n\n    markChangesSweep(scope.drafts);\n  } // When a child draft is returned, look for changes.\n  else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n      markChangesSweep(scope.drafts);\n    }\n}\nfunction createProxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var draft = clonePotentialDraft(base);\n\n  if (isMap(base)) {\n    proxyMap(draft);\n  } else if (isSet(base)) {\n    proxySet(draft);\n  } else {\n    each(draft, function (prop) {\n      proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n    });\n  } // See \"proxy.js\" for property documentation.\n\n\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    scope: scope,\n    modified: false,\n    finalizing: false,\n    finalized: false,\n    assigned: isMap(base) ? new Map() : {},\n    parent: parent,\n    base: base,\n    draft: draft,\n    drafts: isSet(base) ? new Map() : null,\n    copy: null,\n    revoke: revoke$1,\n    revoked: false // es5 only\n\n  };\n  createHiddenProperty(draft, DRAFT_STATE, state);\n  scope.drafts.push(draft);\n  return draft;\n}\n\nfunction revoke$1() {\n  this.revoked = true;\n}\n\nfunction latest$1(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek(draft, prop) {\n  var state = draft[DRAFT_STATE];\n\n  if (state && !state.finalizing) {\n    state.finalizing = true;\n    var value = draft[prop];\n    state.finalizing = false;\n    return value;\n  }\n\n  return draft[prop];\n}\n\nfunction get$1(state, prop) {\n  assertUnrevoked(state);\n  var value = peek(latest$1(state), prop);\n  if (state.finalizing) { return value; } // Create a draft if the value is unmodified.\n\n  if (value === peek(state.base, prop) && isDraftable(value)) {\n    prepareCopy(state);\n    return state.copy[prop] = createProxy(value, state);\n  }\n\n  return value;\n}\n\nfunction set(state, prop, value) {\n  assertUnrevoked(state);\n  state.assigned[prop] = true;\n\n  if (!state.modified) {\n    if (is(value, peek(latest$1(state), prop))) { return; }\n    markChanged(state);\n    prepareCopy(state);\n  }\n\n  state.copy[prop] = value;\n}\n\nfunction markChanged(state) {\n  if (!state.modified) {\n    state.modified = true;\n    if (state.parent) { markChanged(state.parent); }\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy) { state.copy = clonePotentialDraft(state.base); }\n}\n\nfunction clonePotentialDraft(base) {\n  var state = base && base[DRAFT_STATE];\n\n  if (state) {\n    state.finalizing = true;\n    var draft = shallowCopy(state.draft, true);\n    state.finalizing = false;\n    return draft;\n  }\n\n  return shallowCopy(base);\n} // property descriptors are recycled to make sure we don't create a get and set closure per property,\n// but share them all instead\n\n\nvar descriptors = {};\n\nfunction proxyProperty(draft, prop, enumerable) {\n  var desc = descriptors[prop];\n\n  if (desc) {\n    desc.enumerable = enumerable;\n  } else {\n    descriptors[prop] = desc = {\n      configurable: true,\n      enumerable: enumerable,\n      get: function () {\n        return get$1(this[DRAFT_STATE], prop);\n      },\n      set: function (value) {\n        set(this[DRAFT_STATE], prop, value);\n      }\n    };\n  }\n\n  Object.defineProperty(draft, prop, desc);\n}\n\nfunction proxyMap(target) {\n  Object.defineProperties(target, mapTraps);\n\n  if (hasSymbol) {\n    Object.defineProperty(target, Symbol.iterator, // @ts-ignore\n    proxyMethod(iterateMapValues) //TODO: , Symbol.iterator)\n    );\n  }\n}\n\nvar mapTraps = finalizeTraps({\n  size: function (state) {\n    return latest$1(state).size;\n  },\n  has: function (state) {\n    return function (key) {\n      return latest$1(state).has(key);\n    };\n  },\n  set: function (state) {\n    return function (key, value) {\n      if (latest$1(state).get(key) !== value) {\n        prepareCopy(state);\n        markChanged(state);\n        state.assigned.set(key, true);\n        state.copy.set(key, value);\n      }\n\n      return state.draft;\n    };\n  },\n  \"delete\": function (state) {\n    return function (key) {\n      prepareCopy(state);\n      markChanged(state);\n      state.assigned.set(key, false);\n      state.copy[\"delete\"](key);\n      return false;\n    };\n  },\n  clear: function (state) {\n    return function () {\n      if (!state.copy) {\n        prepareCopy(state);\n      }\n\n      markChanged(state);\n      state.assigned = new Map();\n\n      for (var _i = 0, _a = latest$1(state).keys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n        state.assigned.set(key, false);\n      }\n\n      return state.copy.clear();\n    };\n  },\n  forEach: function (state, key, reciever) {\n    return function (cb) {\n      latest$1(state).forEach(function (value, key, map) {\n        cb(reciever.get(key), key, map);\n      });\n    };\n  },\n  get: function (state) {\n    return function (key) {\n      var value = latest$1(state).get(key);\n\n      if (state.finalizing || state.finalized || !isDraftable(value)) {\n        return value;\n      }\n\n      if (value !== state.base.get(key)) {\n        return value;\n      }\n\n      var draft = createProxy(value, state);\n      prepareCopy(state);\n      state.copy.set(key, draft);\n      return draft;\n    };\n  },\n  keys: function (state) {\n    return function () {\n      return latest$1(state).keys();\n    };\n  },\n  values: iterateMapValues,\n  entries: iterateMapValues\n});\n\nfunction proxySet(target) {\n  Object.defineProperties(target, setTraps);\n\n  if (hasSymbol) {\n    Object.defineProperty(target, Symbol.iterator, // @ts-ignore\n    proxyMethod(iterateSetValues) //TODO: , Symbol.iterator)\n    );\n  }\n}\n\nvar iterateSetValues = makeIterateSetValues(createProxy);\nvar setTraps = finalizeTraps({\n  size: function (state) {\n    return latest$1(state).size;\n  },\n  add: function (state) {\n    return function (value) {\n      if (!latest$1(state).has(value)) {\n        markChanged(state);\n\n        if (!state.copy) {\n          prepareCopy(state);\n        }\n\n        state.copy.add(value);\n      }\n\n      return state.draft;\n    };\n  },\n  \"delete\": function (state) {\n    return function (value) {\n      markChanged(state);\n\n      if (!state.copy) {\n        prepareCopy(state);\n      }\n\n      return state.copy[\"delete\"](value);\n    };\n  },\n  has: function (state) {\n    return function (key) {\n      return latest$1(state).has(key);\n    };\n  },\n  clear: function (state) {\n    return function () {\n      markChanged(state);\n\n      if (!state.copy) {\n        prepareCopy(state);\n      }\n\n      return state.copy.clear();\n    };\n  },\n  keys: iterateSetValues,\n  entries: iterateSetValues,\n  values: iterateSetValues,\n  forEach: function (state) {\n    return function (cb, thisArg) {\n      var iterator = iterateSetValues(state)();\n      var result = iterator.next();\n\n      while (!result.done) {\n        cb.call(thisArg, result.value, result.value, state.draft);\n        result = iterator.next();\n      }\n    };\n  }\n});\n\nfunction finalizeTraps(traps) {\n  return Object.keys(traps).reduce(function (acc, key) {\n    var builder = key === \"size\" ? proxyAttr : proxyMethod;\n    acc[key] = builder(traps[key], key);\n    return acc;\n  }, {});\n}\n\nfunction proxyAttr(fn) {\n  return {\n    get: function () {\n      var state = this[DRAFT_STATE];\n      assertUnrevoked(state);\n      return fn(state);\n    }\n  };\n}\n\nfunction proxyMethod(trap, key) {\n  return {\n    get: function () {\n      return function () {\n        var arguments$1 = arguments;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments$1[_i];\n        }\n\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        return trap(state, key, state.draft).apply(void 0, args);\n      };\n    }\n  };\n}\n\nfunction assertUnrevoked(state) {\n  if (state.revoked === true) { throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(latest$1(state))); }\n} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\nfunction markChangesSweep(drafts) {\n  // The natural order of drafts in the `scope` array is based on when they\n  // were accessed. By processing drafts in reverse natural order, we have a\n  // better chance of processing leaf nodes first. When a leaf node is known to\n  // have changed, we can avoid any traversal of its ancestor nodes.\n  for (var i = drafts.length - 1; i >= 0; i--) {\n    var state = drafts[i][DRAFT_STATE];\n\n    if (!state.modified) {\n      if (Array.isArray(state.base)) {\n        if (hasArrayChanges(state)) { markChanged(state); }\n      } else if (isMap(state.base)) {\n        if (hasMapChanges(state)) { markChanged(state); }\n      } else if (isSet(state.base)) {\n        if (hasSetChanges(state)) { markChanged(state); }\n      } else if (hasObjectChanges(state)) {\n        markChanged(state);\n      }\n    }\n  }\n}\n\nfunction markChangesRecursively(object) {\n  if (!object || typeof object !== \"object\") { return; }\n  var state = object[DRAFT_STATE];\n  if (!state) { return; }\n  var base = state.base,\n      draft = state.draft,\n      assigned = state.assigned;\n\n  if (!Array.isArray(object)) {\n    // Look for added keys.\n    Object.keys(draft).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (base[key] === undefined && !has(base, key)) {\n        assigned[key] = true;\n        markChanged(state);\n      } else if (!assigned[key]) {\n        // Only untouched properties trigger recursion.\n        markChangesRecursively(draft[key]);\n      }\n    }); // Look for removed keys.\n\n    Object.keys(base).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (draft[key] === undefined && !has(draft, key)) {\n        assigned[key] = false;\n        markChanged(state);\n      }\n    });\n  } else if (hasArrayChanges(state)) {\n    markChanged(state);\n    assigned.length = true;\n\n    if (draft.length < base.length) {\n      for (var i = draft.length; i < base.length; i++) { assigned[i] = false; }\n    } else {\n      for (var i = base.length; i < draft.length; i++) { assigned[i] = true; }\n    }\n\n    for (var i = 0; i < draft.length; i++) {\n      // Only untouched indices trigger recursion.\n      if (assigned[i] === undefined) { markChangesRecursively(draft[i]); }\n    }\n  }\n}\n\nfunction hasObjectChanges(state) {\n  var base = state.base,\n      draft = state.draft; // Search for added keys and changed keys. Start at the back, because\n  // non-numeric keys are ordered by time of definition on the object.\n\n  var keys = Object.keys(draft);\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    var key = keys[i];\n    var baseValue = base[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n    if (baseValue === undefined && !has(base, key)) {\n      return true;\n    } // Once a base key is deleted, future changes go undetected, because its\n    // descriptor is erased. This branch detects any missed changes.\n    else {\n        var value = draft[key];\n        var state_1 = value && value[DRAFT_STATE];\n\n        if (state_1 ? state_1.base !== baseValue : !is(value, baseValue)) {\n          return true;\n        }\n      }\n  } // At this point, no keys were added or changed.\n  // Compare key count to determine if keys were deleted.\n\n\n  return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n  var draft = state.draft;\n  if (draft.length !== state.base.length) { return true; } // See #116\n  // If we first shorten the length, our array interceptors will be removed.\n  // If after that new items are added, result in the same original length,\n  // those last items will have no intercepting property.\n  // So if there is no own descriptor on the last position, we know that items were removed and added\n  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n  // the last one\n\n  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n  if (descriptor && !descriptor.get) { return true; } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n  return false;\n}\n\nfunction hasMapChanges(state) {\n  var base = state.base,\n      draft = state.draft;\n  if (base.size !== draft.size) { return true; } // IE11 supports only forEach iteration\n\n  var hasChanges = false;\n  draft.forEach(function (value, key) {\n    if (!hasChanges) {\n      hasChanges = isDraftable(value) ? value.modified : value !== base.get(key);\n    }\n  });\n  return hasChanges;\n}\n\nfunction hasSetChanges(state) {\n  var base = state.base,\n      draft = state.draft;\n  if (base.size !== draft.size) { return true; } // IE11 supports only forEach iteration\n\n  var hasChanges = false;\n  draft.forEach(function (value, key) {\n    if (!hasChanges) {\n      hasChanges = isDraftable(value) ? value.modified : !base.has(key);\n    }\n  });\n  return hasChanges;\n}\n\nfunction createHiddenProperty(target, prop, value) {\n  Object.defineProperty(target, prop, {\n    value: value,\n    enumerable: false,\n    writable: true\n  });\n}\n\nvar legacyProxy = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    willFinalize: willFinalize,\n    createProxy: createProxy\n});\n\nvar _a$1, _b;\n\nfunction willFinalize$1() {}\n/**\r\n * Returns a new draft of the `base` object.\r\n *\r\n * The second argument is the parent draft-state (used internally).\r\n */\n\nfunction createProxy$1(base, parent) {\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    // Track which produce call this is associated with.\n    scope: scope,\n    // True for both shallow and deep changes.\n    modified: false,\n    // Used during finalization.\n    finalized: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned: {},\n    // The parent draft state.\n    parent: parent,\n    // The base state.\n    base: base,\n    // The base proxy.\n    draft: null,\n    // Any property proxies.\n    drafts: {},\n    // The base copy with any updated values.\n    copy: null,\n    // Called by the `produce` function.\n    revoke: null\n  }; // the traps must target something, a bit like the 'real' base.\n  // but also, we need to be able to determine from the target what the relevant state is\n  // (to avoid creating traps per instance to capture the state in closure,\n  // and to avoid creating weird hidden properties as well)\n  // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n  // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\n  var target = state;\n  var traps = objectTraps;\n\n  if (Array.isArray(base)) {\n    target = [state];\n    traps = arrayTraps;\n  } // Map drafts must support object keys, so we use Map objects to track changes.\n  else if (isMap(base)) {\n      traps = mapTraps$1;\n      state.drafts = new Map();\n      state.assigned = new Map();\n    } // Set drafts use a Map object to track which of its values are drafted.\n    // And we don't need the \"assigned\" property, because Set objects have no keys.\n    else if (isSet(base)) {\n        traps = setTraps$1;\n        state.drafts = new Map();\n      }\n\n  var _a = Proxy.revocable(target, traps),\n      revoke = _a.revoke,\n      proxy = _a.proxy;\n\n  state.draft = proxy;\n  state.revoke = revoke;\n  scope.drafts.push(proxy);\n  return proxy;\n}\n/**\r\n * Object drafts\r\n */\n\nvar objectTraps = {\n  get: function (state, prop) {\n    if (prop === DRAFT_STATE) { return state; }\n    var drafts = state.drafts; // Check for existing draft in unmodified state.\n\n    if (!state.modified && has(drafts, prop)) {\n      return drafts[prop];\n    }\n\n    var value = latest$2(state)[prop];\n\n    if (state.finalized || !isDraftable(value)) {\n      return value;\n    } // Check for existing draft in modified state.\n\n\n    if (state.modified) {\n      // Assigned values are never drafted. This catches any drafts we created, too.\n      if (value !== peek$1(state.base, prop)) { return value; } // Store drafts on the copy (when one exists).\n\n      drafts = state.copy;\n    }\n\n    return drafts[prop] = createProxy$1(value, state);\n  },\n  has: function (state, prop) {\n    return prop in latest$2(state);\n  },\n  ownKeys: function (state) {\n    return Reflect.ownKeys(latest$2(state));\n  },\n  set: function (state, prop, value) {\n    if (!state.modified) {\n      var baseValue = peek$1(state.base, prop); // Optimize based on value's truthiness. Truthy values are guaranteed to\n      // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n      // values may be drafts, but falsy values are never drafts.\n\n      var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;\n      if (isUnchanged) { return true; }\n      markChanged$1(state);\n    }\n\n    state.assigned[prop] = true;\n    state.copy[prop] = value;\n    return true;\n  },\n  deleteProperty: function (state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (peek$1(state.base, prop) !== undefined || prop in state.base) {\n      state.assigned[prop] = false;\n      markChanged$1(state);\n    } else if (state.assigned[prop]) {\n      // if an originally not assigned property was deleted\n      delete state.assigned[prop];\n    }\n\n    if (state.copy) { delete state.copy[prop]; }\n    return true;\n  },\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n  // the same guarantee in ES5 mode.\n  getOwnPropertyDescriptor: function (state, prop) {\n    var owner = latest$2(state);\n    var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n\n    if (desc) {\n      desc.writable = true;\n      desc.configurable = !Array.isArray(owner) || prop !== \"length\";\n    }\n\n    return desc;\n  },\n  defineProperty: function () {\n    throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n  },\n  getPrototypeOf: function (state) {\n    return Object.getPrototypeOf(state.base);\n  },\n  setPrototypeOf: function () {\n    throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n  }\n};\n/**\r\n * Array drafts\r\n */\n\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n  }\n\n  return objectTraps.deleteProperty.call(this, state[0], prop);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n  }\n\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\n}; // Used by Map and Set drafts\n\n\nvar reflectTraps = makeReflectTraps([\"ownKeys\", \"has\", \"set\", \"deleteProperty\", \"defineProperty\", \"getOwnPropertyDescriptor\", \"preventExtensions\", \"isExtensible\", \"getPrototypeOf\"]);\n/**\r\n * Map drafts\r\n */\n\nvar mapTraps$1 = makeTrapsForGetters((_a$1 = {}, _a$1[DRAFT_STATE] = function (state) {\n  return state;\n}, _a$1.size = function (state) {\n  return latest$2(state).size;\n}, _a$1.has = function (state) {\n  return function (key) {\n    return latest$2(state).has(key);\n  };\n}, _a$1.set = function (state) {\n  return function (key, value) {\n    var values = latest$2(state);\n\n    if (!values.has(key) || values.get(key) !== value) {\n      markChanged$1(state); // @ts-ignore\n\n      state.assigned.set(key, true);\n      state.copy.set(key, value);\n    }\n\n    return state.draft;\n  };\n}, _a$1[\"delete\"] = function (state) {\n  return function (key) {\n    if (latest$2(state).has(key)) {\n      markChanged$1(state); // @ts-ignore\n\n      state.assigned.set(key, false);\n      return state.copy[\"delete\"](key);\n    }\n\n    return false;\n  };\n}, _a$1.clear = function (state) {\n  return function () {\n    markChanged$1(state);\n    state.assigned = new Map();\n    each(latest$2(state).keys(), function (_, key) {\n      // @ts-ignore\n      state.assigned.set(key, false);\n    });\n    return state.copy.clear();\n  };\n}, // @ts-ignore\n_a$1.forEach = function (state, _, receiver) {\n  return function (cb, thisArg) {\n    return latest$2(state).forEach(function (_, key, map) {\n      var value = receiver.get(key);\n      cb.call(thisArg, value, key, map);\n    });\n  };\n}, _a$1.get = function (state) {\n  return function (key) {\n    var drafts = state.modified ? state.copy : state.drafts; // @ts-ignore TODO: ...or fix by using different ES6Draft types (but better just unify to maps)\n\n    if (drafts.has(key)) {\n      // @ts-ignore\n      var value_1 = drafts.get(key);\n      if (isDraft(value_1) || !isDraftable(value_1)) { return value_1; }\n      var draft_1 = createProxy$1(value_1, state); // @ts-ignore\n\n      drafts.set(key, draft_1);\n      return draft_1;\n    }\n\n    var value = latest$2(state).get(key);\n\n    if (state.finalized || !isDraftable(value)) {\n      return value;\n    }\n\n    var draft = createProxy$1(value, state); //@ts-ignore\n\n    drafts.set(key, draft);\n    return draft;\n  };\n}, _a$1.keys = function (state) {\n  return function () {\n    return latest$2(state).keys();\n  };\n}, //@ts-ignore\n_a$1.values = iterateMapValues, //@ts-ignore\n_a$1.entries = iterateMapValues, _a$1[hasSymbol ? Symbol.iterator : \"@@iterator\"] = iterateMapValues, _a$1));\nvar iterateSetValues$1 = makeIterateSetValues(createProxy$1);\n/**\r\n * Set drafts\r\n */\n\nvar setTraps$1 = makeTrapsForGetters((_b = {}, //@ts-ignore\n_b[DRAFT_STATE] = function (state) {\n  return state;\n}, _b.size = function (state) {\n  return latest$2(state).size;\n}, _b.has = function (state) {\n  return function (key) {\n    return latest$2(state).has(key);\n  };\n}, _b.add = function (state) {\n  return function (value) {\n    if (!latest$2(state).has(value)) {\n      markChanged$1(state); //@ts-ignore\n\n      state.copy.add(value);\n    }\n\n    return state.draft;\n  };\n}, _b[\"delete\"] = function (state) {\n  return function (value) {\n    markChanged$1(state); //@ts-ignore\n\n    return state.copy[\"delete\"](value);\n  };\n}, _b.clear = function (state) {\n  return function () {\n    markChanged$1(state); //@ts-ignore\n\n    return state.copy.clear();\n  };\n}, _b.forEach = function (state) {\n  return function (cb, thisArg) {\n    var iterator = iterateSetValues$1(state)();\n    var result = iterator.next();\n\n    while (!result.done) {\n      cb.call(thisArg, result.value, result.value, state.draft);\n      result = iterator.next();\n    }\n  };\n}, _b.keys = iterateSetValues$1, _b.values = iterateSetValues$1, _b.entries = iterateSetValues$1, _b[hasSymbol ? Symbol.iterator : \"@@iterator\"] = iterateSetValues$1, _b));\n/**\r\n * Helpers\r\n */\n// Retrieve the latest values of the draft.\n\nfunction latest$2(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek$1(draft, prop) {\n  var state = draft[DRAFT_STATE];\n  var desc = Reflect.getOwnPropertyDescriptor(state ? latest$2(state) : draft, prop);\n  return desc && desc.value;\n}\n\nfunction markChanged$1(state) {\n  if (!state.modified) {\n    state.modified = true;\n    var base = state.base,\n        drafts = state.drafts,\n        parent = state.parent;\n    var copy = shallowCopy(base);\n\n    if (isSet(base)) {\n      // Note: The `drafts` property is preserved for Set objects, since\n      // we need to keep track of which values are drafted.\n      assignSet(copy, drafts);\n    } else {\n      // Merge nested drafts into the copy.\n      if (isMap(base)) { assignMap(copy, drafts); }else { assign(copy, drafts); }\n      state.drafts = null;\n    }\n\n    state.copy = copy;\n\n    if (parent) {\n      markChanged$1(parent);\n    }\n  }\n}\n/** Create traps that all use the `Reflect` API on the `latest(state)` */\n\n\nfunction makeReflectTraps(names) {\n  return names.reduce(function (traps, name) {\n    // @ts-ignore\n    traps[name] = function (state) {\n      var arguments$1 = arguments;\n\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments$1[_i];\n      }\n\n      return Reflect[name].apply(Reflect, __spreadArrays([latest$2(state)], args));\n    };\n\n    return traps;\n  }, {});\n}\n\nfunction makeTrapsForGetters(getters) {\n  return assign({}, reflectTraps, {\n    get: function (state, prop, receiver) {\n      return getters.hasOwnProperty(prop) ? getters[prop](state, prop, receiver) : Reflect.get(state, prop, receiver);\n    },\n    setPrototypeOf: function (state) {\n      throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n    }\n  });\n}\n\nvar modernProxy = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    willFinalize: willFinalize$1,\n    createProxy: createProxy$1\n});\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n  var generatePatchesFn = Array.isArray(state.base) ? generateArrayPatches : isSet(state.base) ? generateSetPatches : generatePatchesFromAssigned;\n  generatePatchesFn(state, basePath, patches, inversePatches);\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n  var _a, _b;\n\n  var base = state.base,\n      copy = state.copy,\n      assigned = state.assigned; // Reduce complexity by ensuring `base` is never longer.\n\n  if (copy.length < base.length) {\n    _a = [copy, base], base = _a[0], copy = _a[1];\n    _b = [inversePatches, patches], patches = _b[0], inversePatches = _b[1];\n  }\n\n  var delta = copy.length - base.length; // Find the first replaced index.\n\n  var start = 0;\n\n  while (base[start] === copy[start] && start < base.length) {\n    ++start;\n  } // Find the last replaced index. Search from the end to optimize splice patches.\n\n\n  var end = base.length;\n\n  while (end > start && base[end - 1] === copy[end + delta - 1]) {\n    --end;\n  } // Process replaced indices.\n\n\n  for (var i = start; i < end; ++i) {\n    if (assigned[i] && copy[i] !== base[i]) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: copy[i]\n      });\n      inversePatches.push({\n        op: \"replace\",\n        path: path,\n        value: base[i]\n      });\n    }\n  }\n\n  var replaceCount = patches.length; // Process added indices.\n\n  for (var i = end + delta - 1; i >= end; --i) {\n    var path = basePath.concat([i]);\n    patches[replaceCount + i - end] = {\n      op: \"add\",\n      path: path,\n      value: copy[i]\n    };\n    inversePatches.push({\n      op: \"remove\",\n      path: path\n    });\n  }\n} // This is used for both Map objects and normal objects.\n\n\nfunction generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n  var base = state.base,\n      copy = state.copy;\n  each(state.assigned, function (key, assignedValue) {\n    var origValue = get(base, key);\n    var value = get(copy, key);\n    var op = !assignedValue ? \"remove\" : has(base, key) ? \"replace\" : \"add\";\n    if (origValue === value && op === \"replace\") { return; }\n    var path = basePath.concat(key);\n    patches.push(op === \"remove\" ? {\n      op: op,\n      path: path\n    } : {\n      op: op,\n      path: path,\n      value: value\n    });\n    inversePatches.push(op === \"add\" ? {\n      op: \"remove\",\n      path: path\n    } : op === \"remove\" ? {\n      op: \"add\",\n      path: path,\n      value: origValue\n    } : {\n      op: \"replace\",\n      path: path,\n      value: origValue\n    });\n  });\n}\n\nfunction generateSetPatches(state, basePath, patches, inversePatches) {\n  var base = state.base,\n      copy = state.copy;\n  var i = 0;\n  base.forEach(function (value) {\n    if (!copy.has(value)) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"remove\",\n        path: path,\n        value: value\n      });\n      inversePatches.unshift({\n        op: \"add\",\n        path: path,\n        value: value\n      });\n    }\n\n    i++;\n  });\n  i = 0;\n  copy.forEach(function (value) {\n    if (!base.has(value)) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"add\",\n        path: path,\n        value: value\n      });\n      inversePatches.unshift({\n        op: \"remove\",\n        path: path,\n        value: value\n      });\n    }\n\n    i++;\n  });\n}\n\nfunction applyPatches(draft, patches) {\n  patches.forEach(function (patch) {\n    var path = patch.path,\n        op = patch.op;\n    if (!path.length) { throw new Error(\"Illegal state\"); }\n    var base = draft;\n\n    for (var i = 0; i < path.length - 1; i++) {\n      base = get(base, path[i]);\n      if (!base || typeof base !== \"object\") { throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")); } // prettier-ignore\n    }\n\n    var value = clone(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n\n    var key = path[path.length - 1];\n\n    switch (op) {\n      case \"replace\":\n        if (isMap(base)) {\n          base.set(key, value);\n        } else if (isSet(base)) {\n          throw new Error('Sets cannot have \"replace\" patches.');\n        } else {\n          // if value is an object, then it's assigned by reference\n          // in the following add or remove ops, the value field inside the patch will also be modifyed\n          // so we use value from the cloned patch\n          base[key] = value;\n        }\n\n        break;\n\n      case \"add\":\n        if (isSet(base)) {\n          base[\"delete\"](patch.value);\n        }\n\n        Array.isArray(base) ? base.splice(key, 0, value) : isMap(base) ? base.set(key, value) : isSet(base) ? base.add(value) : base[key] = value;\n        break;\n\n      case \"remove\":\n        Array.isArray(base) ? base.splice(key, 1) : isMap(base) ? base[\"delete\"](key) : isSet(base) ? base[\"delete\"](patch.value) : delete base[key];\n        break;\n\n      default:\n        throw new Error(\"Unsupported patch operation: \" + op);\n    }\n  });\n  return draft;\n}\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n  useProxies: typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\",\n  autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" : verifyMinified.name === \"verifyMinified\",\n  onAssign: null,\n  onDelete: null,\n  onCopy: null\n};\n\nvar Immer =\n/** @class */\nfunction () {\n  function Immer(config) {\n    this.useProxies = false;\n    this.autoFreeze = false;\n    assign(this, configDefaults, config);\n    this.setUseProxies(this.useProxies);\n    this.produce = this.produce.bind(this);\n    this.produceWithPatches = this.produceWithPatches.bind(this);\n  }\n  /**\r\n   * The `produce` function takes a value and a \"recipe function\" (whose\r\n   * return value often depends on the base state). The recipe function is\r\n   * free to mutate its first argument however it wants. All mutations are\r\n   * only ever applied to a __copy__ of the base state.\r\n   *\r\n   * Pass only a function to create a \"curried producer\" which relieves you\r\n   * from passing the recipe function every time.\r\n   *\r\n   * Only plain objects and arrays are made mutable. All other objects are\r\n   * considered uncopyable.\r\n   *\r\n   * Note: This function is __bound__ to its `Immer` instance.\r\n   *\r\n   * @param {any} base - the initial state\r\n   * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n   * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n   * @returns {any} a new state, or the initial state if nothing was modified\r\n   */\n\n\n  Immer.prototype.produce = function (base, recipe, patchListener) {\n    var _this = this; // curried invocation\n\n\n    if (typeof base === \"function\" && typeof recipe !== \"function\") {\n      var defaultBase_1 = recipe;\n      recipe = base;\n      var self_1 = this;\n      return function curriedProduce(base) {\n        var arguments$1 = arguments;\n\n        var _this = this;\n\n        if (base === void 0) {\n          base = defaultBase_1;\n        }\n\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments$1[_i];\n        }\n\n        return self_1.produce(base, function (draft) {\n          return recipe.call.apply(recipe, __spreadArrays([_this, draft], args));\n        }); // prettier-ignore\n      };\n    } // prettier-ignore\n\n\n    {\n      if (typeof recipe !== \"function\") {\n        throw new Error(\"The first or second argument to `produce` must be a function\");\n      }\n\n      if (patchListener !== undefined && typeof patchListener !== \"function\") {\n        throw new Error(\"The third argument to `produce` must be a function or undefined\");\n      }\n    }\n    var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n    if (isDraftable(base)) {\n      var scope_1 = ImmerScope.enter();\n      var proxy = this.createProxy(base);\n      var hasError = true;\n\n      try {\n        result = recipe(proxy);\n        hasError = false;\n      } finally {\n        // finally instead of catch + rethrow better preserves original stack\n        if (hasError) { scope_1.revoke(); }else { scope_1.leave(); }\n      }\n\n      if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n        return result.then(function (result) {\n          scope_1.usePatches(patchListener);\n          return _this.processResult(result, scope_1);\n        }, function (error) {\n          scope_1.revoke();\n          throw error;\n        });\n      }\n\n      scope_1.usePatches(patchListener);\n      return this.processResult(result, scope_1);\n    } else {\n      result = recipe(base);\n      if (result === NOTHING) { return undefined; }\n      if (result === undefined) { result = base; }\n      this.maybeFreeze(result, true);\n      return result;\n    }\n  };\n\n  Immer.prototype.produceWithPatches = function (arg1, arg2, arg3) {\n    var _this = this;\n\n    if (typeof arg1 === \"function\") {\n      return function (state) {\n        var arguments$1 = arguments;\n\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments$1[_i];\n        }\n\n        return _this.produceWithPatches(state, function (draft) {\n          return arg1.apply(void 0, __spreadArrays([draft], args));\n        });\n      };\n    } // non-curried form\n\n\n    if (arg3) { throw new Error(\"A patch listener cannot be passed to produceWithPatches\"); }\n    var patches, inversePatches;\n    var nextState = this.produce(arg1, arg2, function (p, ip) {\n      patches = p;\n      inversePatches = ip;\n    });\n    return [nextState, patches, inversePatches];\n  };\n\n  Immer.prototype.createDraft = function (base) {\n    if (!isDraftable(base)) {\n      throw new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\"); // prettier-ignore\n    }\n\n    var scope = ImmerScope.enter();\n    var proxy = this.createProxy(base);\n    proxy[DRAFT_STATE].isManual = true;\n    scope.leave();\n    return proxy;\n  };\n\n  Immer.prototype.finishDraft = function (draft, patchListener) {\n    var state = draft && draft[DRAFT_STATE];\n\n    if (!state || !state.isManual) {\n      throw new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\"); // prettier-ignore\n    }\n\n    if (state.finalized) {\n      throw new Error(\"The given draft is already finalized\"); // prettier-ignore\n    }\n\n    var scope = state.scope;\n    scope.usePatches(patchListener);\n    return this.processResult(undefined, scope);\n  };\n  /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * By default, auto-freezing is disabled in production.\r\n   */\n\n\n  Immer.prototype.setAutoFreeze = function (value) {\n    this.autoFreeze = value;\n  };\n  /**\r\n   * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n   * always faster than using ES5 proxies.\r\n   *\r\n   * By default, feature detection is used, so calling this is rarely necessary.\r\n   */\n\n\n  Immer.prototype.setUseProxies = function (value) {\n    this.useProxies = value;\n    assign(this, value ? modernProxy : legacyProxy);\n  };\n\n  Immer.prototype.applyPatches = function (base, patches) {\n    // If a patch replaces the entire state, take that replacement as base\n    // before applying patches\n    var i;\n\n    for (i = patches.length - 1; i >= 0; i--) {\n      var patch = patches[i];\n\n      if (patch.path.length === 0 && patch.op === \"replace\") {\n        base = patch.value;\n        break;\n      }\n    }\n\n    if (isDraft(base)) {\n      // N.B: never hits if some patch a replacement, patches are never drafts\n      return applyPatches(base, patches);\n    } // Otherwise, produce a copy of the base state.\n\n\n    return this.produce(base, function (draft) {\n      return applyPatches(draft, patches.slice(i + 1));\n    });\n  };\n  /** @internal */\n\n\n  Immer.prototype.processResult = function (result, scope) {\n    var baseDraft = scope.drafts[0];\n    var isReplaced = result !== undefined && result !== baseDraft;\n    this.willFinalize(scope, result, isReplaced);\n\n    if (isReplaced) {\n      if (baseDraft[DRAFT_STATE].modified) {\n        scope.revoke();\n        throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n      }\n\n      if (isDraftable(result)) {\n        // Finalize the result in case it contains (or is) a subset of the draft.\n        result = this.finalize(result, null, scope);\n        this.maybeFreeze(result);\n      }\n\n      if (scope.patches) {\n        scope.patches.push({\n          op: \"replace\",\n          path: [],\n          value: result\n        });\n        scope.inversePatches.push({\n          op: \"replace\",\n          path: [],\n          value: baseDraft[DRAFT_STATE].base\n        });\n      }\n    } else {\n      // Finalize the base draft.\n      result = this.finalize(baseDraft, [], scope);\n    }\n\n    scope.revoke();\n\n    if (scope.patches) {\n      scope.patchListener(scope.patches, scope.inversePatches);\n    }\n\n    return result !== NOTHING ? result : undefined;\n  };\n  /**\r\n   * @internal\r\n   * Finalize a draft, returning either the unmodified base state or a modified\r\n   * copy of the base state.\r\n   */\n\n\n  Immer.prototype.finalize = function (draft, path, scope) {\n    var _this = this;\n\n    var state = draft[DRAFT_STATE];\n\n    if (!state) {\n      if (Object.isFrozen(draft)) { return draft; }\n      return this.finalizeTree(draft, null, scope);\n    } // Never finalize drafts owned by another scope.\n\n\n    if (state.scope !== scope) {\n      return draft;\n    }\n\n    if (!state.modified) {\n      this.maybeFreeze(state.base, true);\n      return state.base;\n    }\n\n    if (!state.finalized) {\n      state.finalized = true;\n      this.finalizeTree(state.draft, path, scope); // We cannot really delete anything inside of a Set. We can only replace the whole Set.\n\n      if (this.onDelete && !isSet(state.base)) {\n        // The `assigned` object is unreliable with ES5 drafts.\n        if (this.useProxies) {\n          var assigned = state.assigned;\n          each(assigned, function (prop, exists) {\n            var _a, _b;\n\n            if (!exists) { (_b = (_a = _this).onDelete) === null || _b === void 0 ? void 0 : _b.call(_a, state, prop); }\n          });\n        } else {\n          // TODO: Figure it out for Maps and Sets if we need to support ES5\n          var base = state.base,\n              copy_1 = state.copy;\n          each(base, function (prop) {\n            var _a, _b;\n\n            if (!has(copy_1, prop)) { (_b = (_a = _this).onDelete) === null || _b === void 0 ? void 0 : _b.call(_a, state, prop); }\n          });\n        }\n      }\n\n      if (this.onCopy) {\n        this.onCopy(state);\n      } // At this point, all descendants of `state.copy` have been finalized,\n      // so we can be sure that `scope.canAutoFreeze` is accurate.\n\n\n      if (this.autoFreeze && scope.canAutoFreeze) {\n        freeze(state.copy, false);\n      }\n\n      if (path && scope.patches) {\n        generatePatches(state, path, scope.patches, scope.inversePatches);\n      }\n    }\n\n    return state.copy;\n  };\n  /**\r\n   * @internal\r\n   * Finalize all drafts in the given state tree.\r\n   */\n\n\n  Immer.prototype.finalizeTree = function (root, rootPath, scope) {\n    var _this = this;\n\n    var state = root[DRAFT_STATE];\n\n    if (state) {\n      if (!this.useProxies) {\n        // Create the final copy, with added keys and without deleted keys.\n        state.copy = shallowCopy(state.draft, true);\n      }\n\n      root = state.copy;\n    }\n\n    var needPatches = !!rootPath && !!scope.patches;\n\n    var finalizeProperty = function (prop, value, parent) {\n      if (value === parent) {\n        throw Error(\"Immer forbids circular references\");\n      } // In the `finalizeTree` method, only the `root` object may be a draft.\n\n\n      var isDraftProp = !!state && parent === root;\n      var isSetMember = isSet(parent);\n\n      if (isDraft(value)) {\n        var path = isDraftProp && needPatches && !isSetMember && // Set objects are atomic since they have no keys.\n        !has(state.assigned, prop) // Skip deep patches for assigned keys.\n        ? rootPath.concat(prop) : null; // Drafts owned by `scope` are finalized here.\n\n        value = _this.finalize(value, path, scope);\n        replace(parent, prop, value); // Drafts from another scope must prevent auto-freezing.\n\n        if (isDraft(value)) {\n          scope.canAutoFreeze = false;\n        } // Unchanged drafts are never passed to the `onAssign` hook.\n\n\n        if (isDraftProp && value === get(state.base, prop)) { return; }\n      } // Unchanged draft properties are ignored.\n      else if (isDraftProp && is(value, get(state.base, prop))) {\n          return;\n        } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n        else if (isDraftable(value) && !Object.isFrozen(value)) {\n            each(value, finalizeProperty);\n\n            _this.maybeFreeze(value);\n          }\n\n      if (isDraftProp && _this.onAssign && !isSetMember) {\n        _this.onAssign(state, prop, value);\n      }\n    };\n\n    each(root, finalizeProperty);\n    return root;\n  };\n\n  Immer.prototype.maybeFreeze = function (value, deep) {\n    if (deep === void 0) {\n      deep = false;\n    }\n\n    if (this.autoFreeze && !isDraft(value)) {\n      freeze(value, deep);\n    }\n  };\n\n  return Immer;\n}();\n\nfunction replace(parent, prop, value) {\n  if (isMap(parent)) {\n    parent.set(prop, value);\n  } else if (isSet(parent)) {\n    // In this case, the `prop` is actually a draft.\n    parent[\"delete\"](prop);\n    parent.add(value);\n  } else if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n    // Preserve non-enumerable properties.\n    parent[prop] = value;\n  } else {\n    Object.defineProperty(parent, prop, {\n      value: value,\n      writable: true,\n      configurable: true\n    });\n  }\n}\n\nvar immer = new Immer();\n/**\r\n * The `produce` function takes a value and a \"recipe function\" (whose\r\n * return value often depends on the base state). The recipe function is\r\n * free to mutate its first argument however it wants. All mutations are\r\n * only ever applied to a __copy__ of the base state.\r\n *\r\n * Pass only a function to create a \"curried producer\" which relieves you\r\n * from passing the recipe function every time.\r\n *\r\n * Only plain objects and arrays are made mutable. All other objects are\r\n * considered uncopyable.\r\n *\r\n * Note: This function is __bound__ to its `Immer` instance.\r\n *\r\n * @param {any} base - the initial state\r\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n * @returns {any} a new state, or the initial state if nothing was modified\r\n */\n\nvar produce = immer.produce;\n/**\r\n * Like `produce`, but `produceWithPatches` always returns a tuple\r\n * [nextState, patches, inversePatches] (instead of just the next state)\r\n */\n\nvar produceWithPatches = immer.produceWithPatches.bind(immer);\n/**\r\n * Pass true to automatically freeze all copies created by Immer.\r\n *\r\n * By default, auto-freezing is disabled in production.\r\n */\n\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n/**\r\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n * always faster than using ES5 proxies.\r\n *\r\n * By default, feature detection is used, so calling this is rarely necessary.\r\n */\n\nvar setUseProxies = immer.setUseProxies.bind(immer);\n/**\r\n * Apply an array of Immer patches to the first argument.\r\n *\r\n * This function is a producer, which means copy-on-write is in effect.\r\n */\n\nvar applyPatches$1 = immer.applyPatches.bind(immer);\n/**\r\n * Create an Immer draft from the given base state, which may be a draft itself.\r\n * The draft can be modified until you finalize it with the `finishDraft` function.\r\n */\n\nvar createDraft = immer.createDraft.bind(immer);\n/**\r\n * Finalize an Immer draft from a `createDraft` call, returning the base state\r\n * (if no changes were made) or a modified copy. The draft must *not* be\r\n * mutated afterwards.\r\n *\r\n * Pass a function as the 2nd argument to generate Immer patches based on the\r\n * changes that were made.\r\n */\n\nvar finishDraft = immer.finishDraft.bind(immer);\n\nexport default produce;\nexport { Immer, applyPatches$1 as applyPatches, createDraft, finishDraft, DRAFTABLE as immerable, isDraft, isDraftable, NOTHING as nothing, original, produce, produceWithPatches, setAutoFreeze, setUseProxies };\n//# sourceMappingURL=immer.module.js.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import { doAction } from './reducers';\nimport { produce, createDraft } from \"immer\";\n\nexport function changePlayerHP(state, hpDelta) {\n    return produce(state, draftState => {\n        const player = draftState.party.adventurers[0];\n        draftState.party.adventurers[0].hp = Math.min(player.maxHP, Math.max(0, player.hp + hpDelta));\n    })\n}\n\nexport function giveThisManACookie(state, gold) {\n    return produce(state, draftState => {\n        draftState.party.adventurers[0].gold += gold;\n    })\n}\n\nexport function levelUp(state) {\n    return produce(state, draftState => {\n        draftState.party.adventurers[0].level += 1;\n        draftState.party.adventurers[0].expToNextLevel += (draftState.party.adventurers[0].level * 300)\n    })\n}\n\nexport function rewardExp(state, exp) {\n    return produce(state, draftState => {\n        while (draftState.party.adventurers[0].expToNextLevel <= exp + draftState.party.adventurers[0].exp) {\n            draftState = createDraft(doAction(\"level-up\", draftState));\n        }\n        draftState.party.adventurers[0].exp += exp;\n        return draftState;\n    })\n}\n\nexport function changeEnemyHP(state, adventureIndex, hpDelta) {\n    return produce(state, draftState => {\n        draftState.adventures[adventureIndex].enemy.hp += hpDelta;\n    })\n\n}\n\nexport function sendAdventurerToAdventure(state, adventureIndex, adventurerName) {\n    return produce(state, draftState => {\n        draftState.party.adventurers.forEach(adventurer => {\n            if(adventurer.name == adventurerName) {\n                adventurer.currentQuest = adventureIndex;\n            }\n        })\n    })\n}\n\nexport function returnAdventurerFromAdventure(state, adventurerName) {\n    return produce(state, draftState => {\n        draftState.party.adventurers.forEach(adventurer => {\n            if(adventurer.name == adventurerName) {\n                adventurer.currentQuest = null;\n            }\n        })\n    })\n}\n\nexport function collectFromAdventure(state, adventureIndex) {\n    return produce(state, draftState => {\n        draftState.adventures[adventureIndex].collectibles -= 1;\n    })\n}\n\nexport function resetAdventure(currentState, initialState, adventureIndex) {\n    return produce(currentState, draftState => {\n        draftState.adventures[adventureIndex] = initialState.adventures[adventureIndex];\n    })\n}\n\nexport function startGame(state, initialState) {\n    let newState = JSON.parse(JSON.stringify(initialState))\n    if (newState.initialState === undefined) {\n        newState.initialState = JSON.parse(JSON.stringify(initialState));\n    }\n    return newState;\n}\n\nexport function chooseAdventurerForAdventure(currentState, isAdventurerGoing, adventurerName, adventureIndex) {\n    return produce(currentState, draftState => {\n        if (isAdventurerGoing) {\n            draftState.adventures[adventureIndex].selectedPartyMembers.push(adventurerName);\n        } else {\n            draftState.adventures[adventureIndex].selectedPartyMembers = draftState.adventures[adventureIndex].selectedPartyMembers.filter(partyMember => partyMember !== adventurerName)\n        }\n    })\n}\nexport function writeToLog(currentState,logMessage){\n    return produce(currentState, draftState => {\n        draftState.log.push(logMessage);\n    })\n}","import { initialState } from './initialState';\nimport { doAction } from './reducers';\nimport { fight } from './quests'\nimport * as store from './store';\n\nfunction healPlayer() {\n    doAction(\"change-player-hp\", { hpDelta: store.getState().party.adventurers[0].hpRegain });\n}\n\nsetInterval(healPlayer, 1000);\nif (localStorage.getItem('game')) {\n    doAction(\"start-game\", { initialState: JSON.parse(localStorage.getItem('game')) });\n    const currentAdventures = new Set(store.getState().party.adventurers.map(adventurer => adventurer.currentQuest ));\n    currentAdventures.forEach(adventureIndex => {\n        if (adventureIndex != null) {\n            fight(store, adventureIndex)\n        }\n    });\n}\nelse {\n    doAction(\"start-game\", { initialState: initialState });\n}\n","export const initialState = {\n    party: {\n        adventurers: [\n            {\n                currentQuest: null,\n                name: \"player1\",\n                maxHP: 100,\n                hp: 100,\n                gold: 100,\n                exp: 0,\n                expToNextLevel: 100,\n                level: 1,\n                hpRegain: 0.5,\n                equipment: [{\n                    name: \"sword +5\",\n                    modifier: 5\n                }],\n                stats: {\n                    strength: 10,\n                    agility: 5\n                },\n            },\n            {\n                currentQuest: null,\n                name: \"pooper\",\n                stats: {\n                    strength: 5\n                },\n                price: 200\n            },\n            {\n                currentQuest: null,\n                name: \"butthole\",\n                stats: {\n                    strength: 5\n                },\n                price: 200\n            },\n        ]\n    },\n    adventures: [\n        {\n            name: \"the basics\",\n            description: \"fetch\",\n            collectibles: 3,\n            requiredLevel: 1,\n            rewards: {\n                gold: 5,\n                item: \"glove\",\n                exp: 100\n            },\n            enemy: {\n                name: \"orc\",\n                hp: 30,\n                damage: 10\n            },\n            selectedPartyMembers: []\n        },\n        {\n            name: \"hardcore orc beatings\",\n            description: \"more fetch\",\n            collectibles: 3,\n            requiredLevel: 2,\n            rewards: {\n                gold: 5,\n                item: \"glove\",\n                exp: 5000\n            },\n            enemy: {\n                name: \"orc\",\n                hp: 50,\n                damage: 20\n            },\n            selectedPartyMembers: []\n        }\n    ],\n    log:[]\n};","import { doAction } from './reducers';\n\nexport function startQuest(store, adventureIndex) {\n\n    if (store.getState().adventures[adventureIndex].selectedPartyMembers.length === 0) {\n        doAction('choose-adventurer-for-adventure', { adventureIndex: adventureIndex, adventurerName: \"player1\", isAdventurerGoing: true });\n    }\n\n    store.getState().adventures[adventureIndex].selectedPartyMembers.forEach(adventurerName => {\n        doAction(\"send-adventurer-to-adventure\", { adventureIndex: adventureIndex, adventurerName: adventurerName }, \"adventurers sent to \" + store.getState().adventures[adventureIndex].name);\n    });\n\n    fight(store, adventureIndex);\n}\n\nexport function performRound(store, adventureIndex) {\n    const strengthSum = getPartyStrength(store.getState(), adventureIndex);\n    doAction(\"change-enemy-hp\", { adventureIndex: adventureIndex, hpDelta: -strengthSum }, \"damage done: \" + strengthSum + \" in the adventure \" + store.getState().adventures[adventureIndex].name);\n\n    if (isDead(store.getState().adventures[adventureIndex].enemy)) {\n        doAction(\"give-this-man-a-cookie\", { gold: store.getState().adventures[adventureIndex].rewards.gold }, \"rewarded \" + store.getState().adventures[adventureIndex].rewards.gold + \" gold\");\n        doAction(\"reward-exp\", { exp: store.getState().adventures[adventureIndex].rewards.exp }, \"recieved \" + store.getState().adventures[adventureIndex].rewards.exp + \"exp\");\n        console.log(\"enemy dead\");\n        store.getState().adventures[adventureIndex].selectedPartyMembers.forEach(adventurerName => {\n            doAction(\"return-adventurer-from-adventure\", { adventurerName: adventurerName }, \"adventurers returned from \" + store.getState().adventures[adventureIndex].name);\n        });\n        doAction(\"reset-adventure\", { adventureIndex: adventureIndex });\n        return \"ENEMY_DEAD\";\n    }\n\n    doAction(\"change-player-hp\", { hpDelta: -store.getState().adventures[adventureIndex].enemy.damage });\n    if (isDead(store.getState().party.adventurers[0])) {\n        console.log(\"you dead\");\n        store.getState().adventures[adventureIndex].selectedPartyMembers.forEach(adventurerName => {\n            doAction(\"return-adventurer-from-adventure\", { adventurerName: adventurerName }, \"adventurers returned from \" + store.getState().adventures[adventureIndex].name);\n        });\n        doAction(\"reset-adventure\", { adventureIndex: adventureIndex });\n        return \"PLAYER_DEAD\";\n    }\n\n    doAction(\"collect-from-adventure\", { adventureIndex: adventureIndex });\n    if (isCollected(store.getState().adventures[adventureIndex])) {\n        doAction(\"give-this-man-a-cookie\", { gold: store.getState().adventures[adventureIndex].rewards.gold });\n        doAction(\"reward-exp\", { exp: store.getState().adventures[adventureIndex].rewards.exp });\n        console.log(\"you got away\");\n        store.getState().adventures[adventureIndex].selectedPartyMembers.forEach(adventurerName => {\n            doAction(\"return-adventurer-from-adventure\", { adventurerName: adventurerName }, \"adventurers returned from \" + store.getState().adventures[adventureIndex].name);\n        });\n        doAction(\"reset-adventure\", { adventureIndex: adventureIndex });\n        return \"PLAYER_ESCAPED\";\n    }\n\n    return \"CONTINUE\"\n}\n\nfunction getPartyStrength(state, adventureindex) {\n    return state.party.adventurers.filter(member => {\n        return state.adventures[adventureindex].selectedPartyMembers.indexOf(member.name) > -1;\n    }).reduce((strengthSum, currentMember) => strengthSum + currentMember.stats.strength, 0)\n}\nfunction isCollected(adventure) {\n    return adventure.collectibles <= 0;\n}\n\nfunction isDead(character) {\n    return character.hp <= 0;\n}\n\nexport function fight(store, adventureIndex) {\n    const intervalId = setInterval(() => {\n        const roundResult = performRound(store, adventureIndex);\n        if (roundResult !== \"CONTINUE\") {\n            clearInterval(intervalId);\n        }\n    }, 2000);\n}\n","import * as ui from './ui';\nimport * as actions from './actions';\nimport * as store from './store';\n\nexport function doAction(action, actionParams, logMessage) {\n    let state = store.getState();\n\n    console.log(Array.from(arguments));\n    if (logMessage) {\n        state = actions.writeToLog(state, logMessage);\n    }\n    switch (action) {\n        case \"start-game\":\n            state = actions.startGame(state, actionParams.initialState);\n            break;\n        case \"change-enemy-hp\":\n            state = actions.changeEnemyHP(state, actionParams.adventureIndex, actionParams.hpDelta);\n            break;\n        case \"change-player-hp\":\n            state = actions.changePlayerHP(state, actionParams.hpDelta);\n            break;\n        case \"give-this-man-a-cookie\":\n            state = actions.giveThisManACookie(state, actionParams.gold);\n            break;\n        case \"collect-from-adventure\":\n            state = actions.collectFromAdventure(state, actionParams.adventureIndex)\n            break;\n        case \"reset-adventure\":\n            state = actions.resetAdventure(state, state.initialState, actionParams.adventureIndex);\n            break;\n        case \"reward-exp\":\n            state = actions.rewardExp(state, actionParams.exp);\n            break;\n        case \"level-up\":\n            state = actions.levelUp(state);\n            break;\n        case \"send-adventurer-to-adventure\":\n            state = actions.sendAdventurerToAdventure(state, actionParams.adventureIndex, actionParams.adventurerName);\n            break;\n        case \"return-adventurer-from-adventure\":\n            state = actions.returnAdventurerFromAdventure(state, actionParams.adventurerName);\n            break;\n        case \"choose-adventurer-for-adventure\":\n            state = actions.chooseAdventurerForAdventure(state, actionParams.isAdventurerGoing, actionParams.adventurerName, actionParams.adventureIndex);\n            break;\n    }\n    localStorage.setItem('game', JSON.stringify(state));\n    console.log(localStorage);\n    store.setState(state);\n\n    console.log(state);\n\n    ui.renderGame(store);\n\n    return state;\n}","let state = {};\n\nexport function getState() {\n    return state;\n}\n\nexport function setState(newState) {\n    state = newState;\n}","import { doAction } from './reducers';\nimport { startQuest } from './quests';\n\nexport function renderGame(store) {\n\n    const player = store.getState().party.adventurers[0];\n    document.getElementById(\"player-hp-progress\").style.width = Math.floor((player.hp * 100) / player.maxHP);\n    document.getElementById(\"player-exp-progress\").style.width = Math.floor((player.exp * 100) / player.expToNextLevel);\n\n    document.getElementById(\"player-hp\").title = player.hpRegain + \"/s\";\n    document.getElementById(\"player-gold\").innerText = player.gold;\n    document.getElementById(\"player-strength\").innerText = player.stats.strength + calculateItemStrength(store);\n    document.getElementById(\"player-agility\").innerText = player.stats.agility;\n\n\n    const newAdventuresElement = getAdventuresElement(store);\n    if (newAdventuresElement.outerHTML != document.getElementById(\"advantures-data\").innerHTML) {\n        document.getElementById(\"advantures-data\").innerHTML = \"\";\n        document.getElementById(\"advantures-data\").appendChild(newAdventuresElement);\n    }\n\n    const newAdventurersElement = getAdventurers(store);\n    if (newAdventurersElement.outerHTML != document.getElementById(\"party-data\").innerHTML) {\n        document.getElementById(\"party-data\").innerHTML = \"\";\n        document.getElementById(\"party-data\").appendChild(newAdventurersElement);\n    }\n\n    const newLogElement = getLog(store);\n    if (newLogElement.outerHTML != document.getElementById(\"quest-log\").innerHTML) {\n        document.getElementById(\"quest-log\").innerHTML = \"\";\n        document.getElementById(\"quest-log\").appendChild(newLogElement);\n    }\n\n}\nfunction calculateItemStrength(store) {\n    return store.getState().party.adventurers[0].equipment.map(x => x.modifier).reduce((a, b) => a + b)\n}\nfunction getPlayerElement(store) {\n    const state = store.getState();\n    const playerContainer = document.createElement(\"div\");\n    const player = state.party.adventurers[0];\n    playerContainer.innerHTML = `\n    <ul>\n        <li>\n            <span class=\"stat-name\">HP</span>:\n            <span id=\"player-hp\">${Math.ceil(player.hp)}</span>\n        </li>\n        <li>\n            <span class=\"stat-name\">exp</span>: \n            <span id=\"player-exp\">${player.exp}/${player.expToNextLevel}</span>\n        </li>\n        <li>\n            <span class=\"stat-name\">level</span>: \n            <span id=\"player-level\">${player.level}</span>\n        </li>\n        <li>\n            <span class=\"stat-name\">gold</span>: \n            <span id=\"player-gold\">${player.gold}</span>\n        </li>\n        <li>\n            <span class=\"stat-name\">strength</span>: \n            <span id=\"player-strength\">${player.stats.strength}</span>\n        </li>\n        <li>\n            <span class=\"stat-name\">agility</span>: \n            <span id=\"player-agility\">${player.stats.agility}</span>\n        </li>\n    </ul>`;\n    return playerContainer;\n\n}\n\nfunction getAdventureElement(state, adventureIndex, whatToDoWhenClicked) {\n    const adventure = state.adventures[adventureIndex];\n    const button = document.createElement(\"button\");\n    button.innerText = adventure.description;\n    button.classList = button.classList + \" go-to-adventure\"\n    button.onclick = whatToDoWhenClicked;\n    if (state.party.adventurers[0].currentQuest !== null) {\n        button.disabled = true;\n    }\n    const adventureContainer = document.createElement(\"div\");\n    adventureContainer.className = \"adventure-container\";\n    adventureContainer.innerHTML = `\n        Monster: ${adventure.enemy.name} (${adventure.enemy.hp} hp)<br />\n        Reward: ${adventure.rewards.gold} gold | ${adventure.rewards.exp} exp <br />\n        Party Member:\n    `;\n    adventureContainer.appendChild(getPartyMembersSelector(state, adventureIndex, state.party.adventurers, (isAdventurerGoing, adventurerName) => {\n        doAction(\"choose-adventurer-for-adventure\", { isAdventurerGoing, adventurerName, adventureIndex })\n    }))\n    adventureContainer.appendChild(button);\n\n    return adventureContainer;\n}\n\nfunction getPartyMembersSelector(state, adventureIndex, adventurers, onChange) {\n    const adventureElements = adventurers.map((adventurer) => {\n        const inputContainer = document.createElement(\"div\");\n        const inputElement = document.createElement(\"input\");\n        inputElement.type = \"checkbox\";\n        const isSelectedOnThisAdventure = state.adventures[adventureIndex].selectedPartyMembers.indexOf(adventurer.name) > -1;\n        const isWentOnAnotherAdventure = adventurer.currentQuest !== null && adventurer.currentQuest !== adventureIndex;\n        const isSelectedForAnotherAdventure = state.adventures.filter(adventure => adventure.selectedPartyMembers.indexOf(adventurer.name) > -1).length > 0;\n\n        if (isSelectedOnThisAdventure && !isWentOnAnotherAdventure) {\n            inputElement.checked = true;\n        } else {\n            if (isSelectedForAnotherAdventure) {\n                inputElement.disabled = true;\n            }\n        }\n        inputElement.value = adventurer.name;\n        inputElement.onchange = event => {\n            onChange(event.target.checked, adventurer.name);\n        }\n        const textElement = document.createElement(\"span\");\n        textElement.innerText = adventurer.name;\n        inputContainer.appendChild(inputElement);\n        inputContainer.appendChild(textElement);\n        return inputContainer;\n    });\n\n    const selector = document.createElement(\"div\");\n    adventureElements.forEach(adventureElement => selector.appendChild(adventureElement));\n    return selector\n}\n\nfunction getAdventuresElement(store) {\n    const state = store.getState();\n    const availableAdventures = getAvailableAdventures(state);\n    const buttons = availableAdventures.map(adventure => {\n        const adventureIndex = state.adventures.indexOf(adventure);\n        return getAdventureElement(state, adventureIndex, () => startQuest(store, adventureIndex));\n    });\n    const buttonsContainer = document.createElement(\"div\");\n    buttons.forEach(button => buttonsContainer.appendChild(button));\n    return buttonsContainer;\n};\n\nfunction getAdventurers(store) {\n    const state = store.getState();\n    const partyContainer = document.createElement(\"div\");\n    partyContainer.className = \"party-container\";\n    state.party.adventurers.forEach(adventurer => {\n        partyContainer.innerHTML += `\n        Member: ${adventurer.name} <br />\n    `});\n    return partyContainer;\n}\n\nfunction getLog(store) {\n    const state = store.getState();\n    const logContainer = document.createElement(\"div\");\n    logContainer.className = \"log-container\";\n    state.log.forEach(line => {\n        logContainer.innerHTML += `\n        ${line} <br />\n    `});\n    return logContainer;\n}\n\nfunction getAvailableAdventures(state) {\n    return state.adventures.filter(adventure => state.party.adventurers[0].level >= adventure.requiredLevel)\n}"],"sourceRoot":""}